type Category {
  id: ID!
  name: String!
  recipes: [Recipe!]!
}

type Course {
  id: ID!
  name: String!
  recipes: [Recipe!]!
}

input CreateExpirationRule {
  defrostTime: Float
  freezerLife: Int
  fridgeLife: Int
  ingredientId: ID
  name: String!
  perishable: Boolean
  tableLife: Int
  variation: String
}

input CreateIngredientInput {
  alternateNames: [String!]
  name: String!
  storageInstructions: String
}

input CreateNutrientInput {
  nutrientId: String!
  value: Float!
}

input CreateNutritionLabelInput {
  connectingId: String
  name: String
  nutrients: [CreateNutrientInput!]
  servingSize: Float
  servingSizeUnitId: String
  servings: Float
  servingsUsed: Float
}

input CreatePriceHistoryInput {
  date: DateTime!
  ingredientId: String!
  price: Float!
  pricePerUnit: Float!
  quantity: Float!
  retailer: String!
  unitId: String!
}

type Cuisine {
  id: ID!
  name: String!
  recipes: [Recipe!]!
}

type DailyReferenceIntake {
  ageMax: Int!
  ageMin: Int!
  gender: Gender!
  id: String!
  nutrient: Nutrient!
  specialCondition: SpecialCondition!
  value: Float!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum DayOfWeek {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

input EditNutrientInput {
  nutrientId: String!
  nutritionLabelId: String!
  value: Float!
}

input EditNutritionLabelInput {
  id: String!
  name: String
  nutrientsToAdd: [CreateNutrientInput!]
  nutrientsToDeleteIds: [String!]
  nutrientsToEdit: [EditNutrientInput!]
  servingSize: Float
  servingSizeUnitId: String
  servings: Float
  servingsUsed: Float
}

input EditPriceHistoryInput {
  date: DateTime
  price: Float
  pricePerUnit: Float
  quantity: Float
  retailer: String
  unitId: String
}

type ExpirationRule {
  defrostTime: Int
  freezerLife: Int
  fridgeLife: Int
  id: ID!
  name: String!
  perishable: Boolean
  tableLife: Int
  variation: String
}

scalar File

enum Gender {
  FEMALE
  MALE
}

type HealthProfile {
  activityLevel: Float!
  age: Int!
  bodyFatPercentage: Float!
  gender: String!
  height: Float!
  id: String!
  targetCarbsGrams: Float
  targetCarbsPercentage: Float
  targetFatGrams: Float
  targetFatPercentage: Float
  targetProteinGrams: Float
  targetProteinPecentage: Float
  weight: Float!
}

type Import {
  createdAt: DateTime!
  fileName: String!
  id: ID!
  records: [ImportRecord!]!
  recordsCount: Int!
  status: String!
  type: String!
}

type ImportRecord {
  name: String!
  nutritionLabel: NutritionLabel!
  recipe: Recipe!
  status: String!
}

enum ImportStatus {
  COMPLETED
  PENDING
}

enum ImportType {
  CRONOMETER
  MY_FITNESS_PAL
  RECIPE_KEEPER
}

type Ingredient {
  alternateNames: [String!]!
  expiration: ExpirationRule!
  id: ID!
  name: String!
  priceHistory: [IngredientPrice!]!
  storageInstructions: String
}

input IngredientFilter {
  amount: NumericalComparison
  ingredientID: String!
  unitId: String
}

type IngredientPrice {
  price: Float!
  pricePerUnit: Float!
  quantity: Float!
  retailer: String!
  unit: Unit!
}

type Mutation {
  addCategoryToRecipe(category: String!, recipeId: String!): Recipe!
  addPriceHistory(price: CreatePriceHistoryInput!): IngredientPrice!
  addRecipeCourse(course: String!, recipeId: String!): Recipe!
  addRecipePhotos(photoId: [String!]!, recipeId: String!): Recipe!
  changeRecipeCuisine(cuisineId: String!, recipeId: String!): Recipe!
  connectExpirationRule(
    expirationRuleId: String!
    ingredientId: String!
  ): Ingredient!
  connectNutritionLabelToIngredientGroup(
    groupId: String!
    labelId: String!
    recipeId: String!
  ): RecipeIngredientGroup!
  connectNutritionLabeltoRecipe(labelId: String!, recipeId: String!): Recipe!
  createCategory(name: String!): [Category!]!
  createCourse(name: String!): [Course!]!
  createCuisine(name: String!): [Cuisine!]!
  createExpirationRule(
    ingredientId: String
    rule: CreateExpirationRule!
  ): ExpirationRule!
  createIngredient(ingredient: CreateIngredientInput!): Ingredient!
  createProfile(profile: ProfileInput!): HealthProfile!
  createRecipe(recipe: RecipeInput!): Recipe!
  deleteCategory(categoryId: String!): [Category!]!
  deleteCourse(courseId: String!): [Course!]!
  deleteCuisine(cuisineId: String!): [Cuisine!]!
  deleteExpirationRule(expirationRuleId: String!): [ExpirationRule!]!
  deleteIngredient(ingredientToDeleteId: String!): [Ingredient!]!
  deleteNutritionLabel(id: String!): [NutritionLabel!]!
  deletePriceHistory(
    ingredientId: String!
    ingredientPriceId: [String!]!
  ): [IngredientPrice!]!
  disconnectNutritionLabelFromIngredientGroup(
    deleteLabel: Boolean!
    groupId: String!
    labelId: String!
    recipeId: String!
  ): RecipeIngredientGroup!
  disconnectNutritionLabelFromRecipe(
    labelId: String!
    recipeId: String!
  ): Recipe!
  editExpirationRule(
    expirationRule: CreateExpirationRule!
    expirationRuleId: String!
  ): ExpirationRule!
  editIngredient(
    ingredient: CreateIngredientInput!
    ingredientId: String!
  ): Ingredient!
  editPriceHistory(
    price: EditPriceHistoryInput!
    priceId: String!
  ): IngredientPrice!
  editProfile(id: String!, profile: ProfileInput!): HealthProfile!
  importRecipeKeeper(file: File!, type: ImportType!): Import!
  markImportAsComplete(id: String!): Import!
  mergeIngredients(
    ingredientIdToDelete: String!
    ingredientIdToKeep: String!
  ): Ingredient!
  removeCategoryFromRecipe(categoryId: String!, recipeId: String!): Recipe!
  removeCourseFromRecipe(courseId: String!, recipeId: String!): Recipe!
  removeRecipeCuisine(cuisineId: String!, recipeId: String!): Recipe!
  removeRecipePhotos(photoIds: [String!]!, recipeId: String!): Recipe!
}

input NumericalComparison {
  eq: Int
  gte: Int
  lte: Int
}

type Nutrient {
  childNutrients: [Nutrient!]!
  customTarget: Float
  dailyReferenceIntakeValue(
    age: Int!
    gender: Gender!
    specialCondition: SpecialCondition!
  ): Float!
  id: String!
  name: String!
  otherNames: [String!]!
  type: String!
  unit: Unit!
}

enum NutrientType {
  ALCOHOL
  CARBOHYDRATE
  FAT
  MINERAL
  OTHER
  PROTEIN
  VITAMIN
}

input NutritionFilter {
  nutrientID: String!
  perServing: Boolean
  target: NumericalComparison
}

type NutritionLabel {
  id: ID!
  importRecord: ImportRecord
  ingredientGroup: RecipeIngredientGroup!
  name: String
  nutrients: [NutritionLabelNutrient!]!
  recipe: Recipe
  servingSize: Float
  servings: Float
  servingsUsed: Float
}

type NutritionLabelNutrient {
  nutrient: Nutrient!
  value: Float!
  valuePerServing: Float
}

input NutritionLabelsInput {
  baseLabel: CreateNutritionLabelInput!
  ingredientGroupLabels: [CreateNutritionLabelInput!]
}

type Photo {
  id: ID!
  isPrimary: Boolean!
  url: String!
}

input ProfileInput {
  activityLevel: Float!
  birthYear: Int!
  bodyFatPercentage: Float!
  gender: Gender!
  height: Float!
  targetCarbsGrams: Float
  targetCarbsPercentage: Float
  targetFatGrams: Float
  targetFatPercentage: Float
  targetProteinGrams: Float
  targetProteinPecentage: Float
  weight: Float!
}

type Query {
  categories(searchString: String): [Category!]!
  courses(searchString: String): [Course!]!
  cuisines(searchString: String): [Cuisine!]!
  expirationRule(expirationRuleId: String!): ExpirationRule!
  importRecords(importId: String!): [ImportRecord!]!
  imports: [Import!]!
  ingredient(ingredientId: String!): Ingredient!
  ingredientPrice(ingredientPriceId: String!): IngredientPrice!
  ingredients(limit: Int, searchString: String, start: Int): [Ingredient!]!
  priceHistory(ingredientId: String!, retailer: String): [IngredientPrice!]!
  profile: HealthProfile!
  recipe(recipeId: String!): Recipe!
}

type Recipe {
  category: [Category!]!
  cookTime: Int
  course: [Course!]!
  cuisine: Cuisine!
  directions: String
  id: ID!
  ingredients: [RecipeIngredients!]!
  isFavorite: Boolean!
  isVerified: Boolean
  leftoverFridgeLife: Int
  marinadeTime: Int
  name: String!
  notes: String
  photos: [Photo!]!
  prepTime: Int
  stars: Int
}

input RecipeFilter {
  categoryIds: [String!]
  cookTime: NumericalComparison
  courseIds: [String!]
  cuisineIds: [String!]
  ingredientFilter: [IngredientFilter!]
  isFavorite: Boolean
  marinadeTime: NumericalComparison
  numOfServings: NumericalComparison
  nutrientFilters: [NutritionFilter!]
  prepTime: NumericalComparison
  searchString: String
  totalPrepTime: NumericalComparison
}

type RecipeIngredientGroup {
  name: String!
  nutritionLabel: NutritionLabel
  servings: Int
  servingsInRecipe: Int
}

type RecipeIngredients {
  baseIngredient: Ingredient
  comment: String
  maxQuantity: Float
  minQuantity: Float
  name: String
  order: Int!
  other: String
  quantity: Float
  recipes: Recipe!
  sentence: String!
  unit: Unit!
}

input RecipeInput {
  categoryIds: [String!]
  cookTime: Int
  courseIds: [String!]
  cuisineId: String
  directions: String
  ingredients: String
  isFavorite: Boolean
  leftoverFreezerLife: Int
  leftoverFridgeLife: Int
  marinadeTime: Int
  notes: String
  photoIds: [String!]
  prepTime: Int
  source: String
  title: String!
}

enum RecordStatus {
  DUPLICATE
  IGNORED
  IMPORTED
  PENDING
  UPDATED
  VERIFIED
}

enum SpecialCondition {
  LACTATING
  NONE
  PREGNANT
}

type Unit {
  abbreviations: [String!]!
  id: String!
  name: String!
  symbol: String
}
