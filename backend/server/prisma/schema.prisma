 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator json {
  provider = "prisma-json-types-generator"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "../src/types/PothosTypes.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ImportType {
  MY_FITNESS_PAL
  RECIPE_KEEPER
  CRONOMETER
  DRI
  WEB
}

enum NutrientType {
  CARBOHYDRATE
  FAT
  PROTEIN
  ALCOHOL
  MINERAL
  VITAMIN
  OTHER
  GENERAL
}

enum UnitType {
  VOLUME
  WEIGHT
  COUNT
  ENERGY
}

enum Meal {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum NotificationStatus {
  CREATED
  DELIVERED
  SCHEDULED
  CANCELED
}

model Notification {
  id           String             @id @default(cuid())
  deliveryDate DateTime
  message      String
  status       NotificationStatus
  schedule     ScheduledPlan      @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId   String
}

model ScheduledPlan {
  id            String         @id @default(cuid())
  startDate     DateTime       @db.Date
  duration      Int
  notifications Notification[]
  mealPlan      MealPlan       @relation(fields: [mealPlanId], references: [id])
  mealPlanId    String
  /// [MealPlanRecipesxCopy]
  recipes       Json
  shoppingDays  Int[]
}

model MealPlan {
  id                   String            @id @default(cuid())
  name                 String
  mealPrepInstructions String?
  planRecipes          MealPlanRecipe[]
  mealPlanServings     MealPlanServing[]
  shoppingDays         Int[]
  draft                Boolean           @default(true)
  schedules            ScheduledPlan[]
  // @@map("meal_plan")
}

model NotificationSetting {
  id                 String  @id @default(cuid())
  timeZone           String
  defrostWarning     Boolean @default(true)
  defrostWarningTime Int     @default(19)
  leftoverExpiration Boolean @default(true)
  leftoverTime       Int     @default(8)
  mealReminder       Boolean @default(true)
  mealTime           Int     @default(8)
  shoppingReminder   Boolean @default(true)
  shoppingTime       Int     @default(9)
}

model MealPlanServing {
  id               String         @id @default(cuid())
  mealPlan         MealPlan       @relation(fields: [mealPlanId], references: [id])
  mealPlanId       String
  day              Int
  meal             Meal
  recipe           MealPlanRecipe @relation(fields: [mealPlanRecipeId], references: [id], onDelete: Cascade)
  mealPlanRecipeId String
  numberOfServings Int

  // @@map("meal_plan_serving")
  @@unique([mealPlanId, day, meal, mealPlanRecipeId])
}

model MealPlanRecipe {
  id            String            @id @default(cuid())
  mealPlan      MealPlan          @relation(fields: [mealPlanId], references: [id])
  mealPlanId    String
  recipe        Recipe            @relation(fields: [recipeId], references: [id])
  recipeId      String
  factor        Float             @default(1)
  totalServings Int
  cookDay       Int?
  servings      MealPlanServing[]
  // @@map("meal_plan_recipe")
}

model Import {
  id            String         @id @default(cuid())
  fileName      String?
  fileHash      String?
  type          ImportType
  status        ImportStatus
  storagePath   String
  /// [ImageMapping]
  imageMapping  Json?
  createdAt     DateTime       @default(now())
  importRecords ImportItem[]
  // @@map("import")
}

model ImportItem {
  id                String                 @id @default(cuid())
  import            Import                 @relation(fields: [importId], references: [id])
  importId          String
  hash              String?
  externalId        String?
  name              String
  parsedFormat      Json
  status            RecordStatus
  verified           Boolean                @default(false)
  recipe            Recipe?                @relation(fields: [recipeId], references: [id])
  recipeId          String?
  nutritionLabel    NutritionLabel?        @relation(fields: [nutritionLabelId], references: [id])
  nutritionLabelId  String?
  ingredientGroup   RecipeIngredientGroup? @relation(fields: [ingredientGroupId], references: [id])
  ingredientGroupId String?
  draftId           String?
  createdAt         DateTime               @default(now())

}

model ImportDraft {
    id                String                 @id @default(cuid())
    draftId           String
    type              EntityType
}

// Status for entire import
enum ImportStatus {
  PENDING
  REVIEW
  DUPLICATE
  COMPLETED
  FAILED
}

// Status for individual record
enum RecordStatus {
  IMPORTED //Item was imported into DB
  DUPLICATE // Item already exists, if duplicate record was created, it will be deleted
  UPDATED // Item will be updated with matching recipe/ nutrition label
  IGNORED // Do not import/update, future imports will not look at it
  FAILED // Import failed
}

model RecipeIngredient {
  id                String                 @id @default(cuid())
  sentence          String
  quantity          Float?
  name              String?
  order             Int
  unit              MeasurementUnit?       @relation(fields: [measurementUnitId], references: [id])
  measurementUnitId String?
  recipe            Recipe                 @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId          String // relation scalar field (used in the `@relation` attribute above)
  ingredient        Ingredient?            @relation(fields: [ingredientId], references: [id])
  ingredientId      String? // relation scalar field (used in the `@relation` attribute above)
  group             RecipeIngredientGroup? @relation(fields: [groupId], references: [id])
  groupId           String?
  // @@map("recipe_ingredient")
}

model MeasurementUnit {
  id              String                  @id @default(cuid())
  name            String                  @unique
  abbreviations   String[]
  symbol          String?
  type            UnitType?
  ingredients     RecipeIngredient[]
  nutrients       Nutrient[]
  ingredientPrice IngredientPrice[]
  servingSizes    NutritionLabel[]
  aggServingSizes AggregateLabel[]
  fromUnit        MeasurementConversion[] @relation("FromUnit")
  toUnit          MeasurementConversion[] @relation("ToUnit")
  recieptItems    ReceiptLine[]
  // @@map("measurement_unit")
}

model RecipeIngredientGroup {
  id             String             @id @default(cuid())
  name           String
  recipe         Recipe             @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId       String
  ingredients    RecipeIngredient[]
  nutritionLabel NutritionLabel?
  importRecords  ImportItem[]
  // @@map("recipe_ingredient_group")

  @@unique(name: "ingredientGroup", [recipeId, name])
}

model Ingredient {
  id                  String                  @id @default(cuid())
  recipeIngredient    RecipeIngredient[]
  name                String                  @unique
  alternateNames      String[]
  variant             String?
  category            IngredientCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId          String?
  storageInstructions String?
  priceHistory        IngredientPrice[]
  expirationRule      ExpirationRule?         @relation(fields: [expirationRuleId], references: [id], onDelete: SetNull)
  expirationRuleId    String?
  receiptLines        ReceiptLine[]
  conversionRatio     MeasurementConversion[]
  // @@map("ingredient")
}

model MeasurementConversion {
  id              String          @id @default(cuid())
  fromUnit        MeasurementUnit @relation("FromUnit", fields: [fromUnitId], references: [id])
  fromUnitId      String
  toUnit          MeasurementUnit @relation("ToUnit", fields: [toUnitId], references: [id])
  toUnitId        String
  conversionRatio Float
  ingredient      Ingredient?     @relation(fields: [ingredientId], references: [id])
  ingredientId    String?
  // @@map("measurement_conversion")
}

model IngredientCategory {
  id          String       @id @default(cuid())
  name        String       @unique
  ingredients Ingredient[]
  // @@map("ingredient_category")
}

model ExpirationRule {
  id          String       @id @default(cuid())
  name        String
  variant     String?
  defrostTime Int?
  perishable  Boolean?
  tableLife   Int?
  fridgeLife  Int?
  freezerLife Int?
  ingredients Ingredient[]
  // @@map("expiration_rule")
}

model IngredientPrice {
  id             String          @id @default(cuid())
  date           DateTime
  groceryStore   GroceryStore    @relation(fields: [groceryStoreId], references: [id])
  groceryStoreId String
  price          Float
  size           Float
  foodType       FoodType?
  pricePerUnit   Float
  ingredient     Ingredient      @relation(fields: [ingredientId], references: [id])
  ingredientId   String
  unit           MeasurementUnit @relation(fields: [unitId], references: [id])
  unitId         String
  receiptLine    ReceiptLine?    @relation(fields: [receiptLineId], references: [id])
  receiptLineId  String?         @unique
  // @@map("ingredient_price")
}

model GroceryStore {
  id               String            @id @default(cuid())
  name             String            @unique
  receipts         Receipt[]
  ingredientPrices IngredientPrice[]
}

model Receipt {
  id              String        @id @default(cuid())
  merchantName    String?
  matchingStore   GroceryStore? @relation(fields: [storeId], references: [id])
  storeId         String?
  total           Float?
  transactionDate DateTime?
  hash            String
  path            String
  lineItems       ReceiptLine[]
  scanned         Boolean       @default(false)
  verified         Boolean       @default(false)
}

model ReceiptLine {
  id                 String           @id @default(cuid())
  totalPrice         Float?
  description        String?
  quantity           Float?
  perUnitPrice       Float?
  productCode        String?
  unitQuantity       String?
  receipt            Receipt          @relation(fields: [receiptId], references: [id])
  receiptId          String
  ingredientPrice    IngredientPrice?
  matchingUnit       MeasurementUnit? @relation(fields: [unitId], references: [id])
  unitId             String?
  matchingIngredient Ingredient?      @relation(fields: [ingredientId], references: [id])
  foodType           FoodType?
  ingredientId       String?
  /// [BoundingBoxes]
  boundingBoxes      Json
}

enum FoodType {
  FROZEN
  CANNED
  PACKAGED
  FRESH
}

enum EntityType {
  RECIPE
  LABEL
}

model WebScrapedRecipe {
  id         String   @id @default(cuid())
  url        String
  isBookmark Boolean  @default(false)
  scraped    Boolean  @default(false)
  created    DateTime @default(now())
  recipe     Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId   String?  @unique
}

model Recipe {
  id                  String                  @id @default(cuid())
  type                EntityType              @default(RECIPE)
  name                String
  source              String?
  preparationTime     Int?
  cookingTime         Int?
  marinadeTime        Int?
  totalTime           Int?
  ingredientsTxt      String?
  directions          String?
  notes               String?
  photos              Photo[]
  isFavorite          Boolean                 @default(false)
  course              Course[]
  category            Category[]
  cuisine             Cuisine[]
  ingredients         RecipeIngredient[]
  mealPlans           MealPlanRecipe[]
  importId            String?
  leftoverFridgeLife  Int?
  leftoverFreezerLife Int?
  verified          Boolean                 @default(false)
  nutritionLabels     NutritionLabel[]
  ingredientGroups    RecipeIngredientGroup[]
  importRecord        ImportItem[]
  bookmarkUrl         WebScrapedRecipe?
  aggregateLabel      AggregateLabel?

  // @@map("recipe")
}

// BREAKFAST, LUNCH, DINNER, SNACK
model Course {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[]
  // @@map("course")
}

// Main Dish, Side Dish, Dessert, Appetizer, Salad, Soup, Bread, Beverage, Sauce or Condiment, Seasoning or Spice, Marinade, Fingerfood, Snack, Drink
model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[]
  // @@map("category")
}

model Cuisine {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[]
  // @@map("cuisine")
}

model Photo {
  id        String  @id @default(cuid())
  path      String
  isPrimary Boolean @default(false)
  hash      String  @unique
  recipe    Recipe? @relation(fields: [recipeId], references: [id], onDelete: SetNull)
  recipeId  String?
  // @@map("photo")
}

model NutritionLabel {
  id                String                   @id @default(cuid())
  type              EntityType               @default(LABEL)
  recipe            Recipe                   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId          String
  ingredientGroup   RecipeIngredientGroup?   @relation(fields: [ingredientGroupId], references: [id], onDelete: Cascade)
  ingredientGroupId String?                  @unique
  nutrients         NutritionLabelNutrient[]
  verified           Boolean                  @default(false)
  servings          Float?
  servingSize       Float?
  servingSizeUnit   MeasurementUnit?         @relation(fields: [unitId], references: [id])
  unitId            String?
  servingsUsed      Float?
  isPrimary         Boolean                  @default(false)
  importRecords     ImportItem[]
  updated           DateTime                 @updatedAt
  // @@map("nutrition_label")

  @@unique([recipeId, ingredientGroupId])
}

model AggregateLabel {
  id                 String             @id @default(cuid())
  recipe             Recipe             @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId           String             @unique
  nutrients          AggLabelNutrient[]
  servings           Float?
  servingSize        Float?
  servingSizeUnit    MeasurementUnit?   @relation(fields: [unitId], references: [id])
  unitId             String?
  protein            Float?
  carbs              Float?
  fat                Float?
  alcohol            Float?
  totalCalories      Float?
  caloriesPerServing Float?
  updated            DateTime           @updatedAt
}

model NutritionLabelNutrient {
  nutritionLabel   NutritionLabel @relation(fields: [nutritionLabelId], references: [id], onDelete: Cascade)
  nutritionLabelId String
  nutrient         Nutrient       @relation(fields: [nutrientId], references: [id], onDelete: Restrict)
  nutrientId       String
  value            Float

  @@id(name: "compoundId", [nutritionLabelId, nutrientId])
}

model AggLabelNutrient {
  aggLabel        AggregateLabel @relation(fields: [aggLabelId], references: [id], onDelete: Cascade)
  aggLabelId      String
  nutrient        Nutrient       @relation(fields: [nutrientId], references: [id], onDelete: Restrict)
  nutrientId      String
  value           Float
  valuePerServing Float?

  @@id(name: "compoundId", [aggLabelId, nutrientId])
}

model Nutrient {
  id                      String                   @id @default(cuid())
  name                    String                   @unique
  alternateNames          String[]
  type                    NutrientType
  advancedView            Boolean
  important               Boolean  @default(false)
  customTarget            Float?
  dri                     DailyReferenceIntake[]
  parentNutrientId        String?
  order                   Int
  parentNutrient          Nutrient?                @relation("SubNutrients", fields: [parentNutrientId], references: [id])
  subNutrients            Nutrient[]               @relation("SubNutrients")
  nutritionLabelNutrients NutritionLabelNutrient[]
  aggLabelNutrients       AggLabelNutrient[]
  unit                    MeasurementUnit          @relation(fields: [unitId], references: [id])
  unitId                  String
  mappings                NutrientImportMapping[]
  // @@map("nutrient")
}

model NutrientImportMapping {
  id         String     @id @default(cuid())
  importType ImportType
  nutrient   Nutrient   @relation(fields: [nutrientId], references: [id])
  nutrientId String
  lookupName String

  // @@map("nutrient_import_mapping")
}

model DailyReferenceIntake {
  id               String           @id @default(cuid())
  value            Float
  gender           Gender
  ageMin           Int
  ageMax           Int
  specialCondition SpecialCondition
  nutrient         Nutrient         @relation(fields: [nutrientId], references: [id])
  nutrientId       String
  // @@map("daily_reference_intake")
}

enum Gender {
  MALE
  FEMALE
}

enum SpecialCondition {
  PREGNANT
  LACTATING
  NONE
}

model HealthProfile {
  id                      String           @id @default(cuid())
  weight                  Float?
  gender                  Gender
  bodyFatPercentage       Float?
  height                  Float?
  yearBorn                Int
  activityLevel           Float?
  specialCondition        SpecialCondition
  targetProteinPercentage Float?
  targetProteinGrams      Float?
  targetCarbsPercentage   Float?
  targetCarbsGrams        Float?
  targetFatPercentage     Float?
  targetFatGrams          Float?
  // @@map("health_profile")
}
