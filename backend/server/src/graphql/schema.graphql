input AddRecipeInput {
  cookDay: Int
  mealPlanId: String!
  recipeId: String!
  scaleFactor: Float!
  servings: Int!
}

input AddRecipeServingInput {
  day: Int!
  meal: Meal!
  mealPlanId: String!
  mealPlanRecipeId: String!
  servings: Int!
}

type AggregateLabel {
  calories: Float!
  caloriesPerServing: Float
  carbPercentage: Float!
  fatPercentage: Float!
  nutrients: [AggregateNutrient!]!
  proteinPercentage: Float!
  servingSize: Float
  servingUnit: MeasurementUnit
  servings: Int
  servingsUsed: Int
}

type AggregateNutrient {
  id: String!
  name: String!
  perServing: Float
  target: NutrientTarget
  unit: MeasurementUnit!
  value: Float!
}

type Category {
  id: ID!
  name: String!
  recipes: [Recipe!]!
}

type Course {
  id: ID!
  name: String!
  recipes: [Recipe!]!
}

input CreateExpirationRule {
  defrostTime: Float
  freezerLife: Int!
  fridgeLife: Int!
  ingredientId: ID
  name: String!
  perishable: Boolean
  tableLife: Int!
  variation: String
}

input CreateIngredientInput {
  alternateNames: [String!]
  name: String!
  storageInstructions: String
}

input CreateNutrientInput {
  nutrientId: String!
  value: Float!
}

input CreateNutritionLabelInput {
  ingredientGroupId: String
  isPrimary: Boolean
  name: String
  nutrients: [CreateNutrientInput!]
  servingSize: Float
  servingSizeUnitId: String
  servings: Float!
  servingsUsed: Float
}

input CreatePriceHistoryInput {
  date: DateTime!
  foodType: FoodType
  groceryStore: String!
  ingredientId: String!
  price: Float!
  pricePerUnit: Float!
  quantity: Float!
  recieptLineId: String
  unitId: String!
}

input CreateUnitInput {
  abbreviations: [String!]!
  name: String!
  symbol: String
  type: UnitType
}

type Cuisine {
  id: ID!
  name: String!
  recipes: [Recipe!]!
}

input CursorPagination {
  cursor: DateTime
  take: Int
}

type DailyReferenceIntake {
  id: String!
  nutrient: Nutrient!
  value: Float!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

union Draft = NutritionLabel | Recipe

input EditMealPlanInput {
  id: String!
  mealPrepInstructions: String
  name: String
}

input EditMealPlanRecipeInput {
  factor: Float
  servings: Int
}

input EditNutritionLabelInput {
  id: String!
  ingredientGroupId: String
  isPrimary: Boolean
  name: String
  nutrientsToAdd: [CreateNutrientInput!]
  nutrientsToDelete: [String!]
  nutrientsToEdit: [CreateNutrientInput!]
  servingSize: Float
  servingSizeUnitId: String
  servings: Float
  servingsUsed: Float
}

input EditPriceHistoryInput {
  date: DateTime
  foodType: FoodType
  groceryStore: String
  ingredientId: String
  price: Float
  pricePerUnit: Float
  quantity: Float
  recieptLineId: String
  unitId: String
}

input EditRecipeServingInput {
  day: Int!
  id: String!
  meal: Meal!
  servings: Int!
}

type ExpirationRule {
  defrostTime: Int
  freezerLife: Int
  fridgeLife: Int
  id: ID!
  name: String!
  perishable: Boolean
  tableLife: Int
  variation: String
}

type ExpirationRulesQuery {
  ingredients: [ExpirationRule!]!
  itemsRemaining: Int!
  nextOffset: Int
}

scalar File

enum FoodType {
  CANNED
  FRESH
  FROZEN
}

enum Gender {
  FEMALE
  MALE
}

type GroceryStore {
  id: String!
  name: String!
}

type GroupedRecipeIngredient {
  ingredientId: String
  ingredientName: String
  recipeIngredients: [RecipeIngredients!]!
}

type HealthProfile {
  activityLevel: Float
  age: Int!
  bodyFatPercentage: Float
  gender: String!
  height: Float
  id: String!
  specialCondition: SpecialCondition!
  targetCarbsGrams: Float
  targetCarbsPercentage: Float
  targetFatGrams: Float
  targetFatPercentage: Float
  targetProteinGrams: Float
  targetProteinPecentage: Float
  weight: Float
}

type Import {
  createdAt: DateTime!
  fileName: String
  id: ID!
  records: [ImportRecord!]
  recordsCount: Int!
  status: ImportStatus!
  type: PrismaImportType!
}

type ImportRecord {
  draft: Draft
  id: String!
  ingredientGroup: RecipeIngredientGroup
  label: NutritionLabel
  name: String!
  recipe: Recipe
  status: RecordStatus!
  verifed: Boolean!
}

type ImportRecordsQuery {
  itemsRemaining: Int!
  nextOffset: Int
  records: [ImportRecord!]!
}

enum ImportStatus {
  COMPLETED
  DUPLICATE
  FAILED
  PENDING
  REVIEW
}

enum ImportType {
  CRONOMETER
  RECIPE_KEEPER
}

type ImportsQuery {
  importJobs: [Import!]!
  itemsRemaining: Int!
  nextOffset: Int
}

type Ingredient {
  alternateNames: [String!]!
  expiration: ExpirationRule!
  id: ID!
  name: String!
  priceHistory: [IngredientPriceHistory!]!
  storageInstructions: String
}

input IngredientFilter {
  amount: NumericalComparison
  ingredientID: String!
  unitId: String
}

type IngredientPriceHistory {
  date: DateTime
  foodType: FoodType
  groceryStore: GroceryStore!
  id: String!
  ingredient: Ingredient!
  price: Float!
  pricePerUnit: Float!
  quantity: Float!
  receiptLine: ReceiptLine!
  unit: MeasurementUnit!
}

type IngredientsQuery {
  ingredients: [Ingredient!]!
  itemsRemaining: Int!
  nextOffset: Int
}

enum Meal {
  BREAKFAST
  DINNER
  LUNCH
  SNACK
}

type MealPlan {
  id: ID!
  mealPlanServings: [MealPlanServing!]!
  mealPrepInstructions: String
  name: String
  planRecipes: [MealPlanRecipe!]!
  schedules: [ScheduledPlan!]!
  shopppingDays: [Int!]!
}

type MealPlanRecipe {
  factor: Float!
  id: ID!
  mealPlan: MealPlan!
  mealPlanServings: [MealPlanServing!]!
  nutritionLabel(advanced: Boolean): AggregateLabel
  recipe: Recipe!
  servingsUsed(mealId: String!): Int!
  totalServings: Int!
}

type MealPlanServing {
  day: Int!
  id: ID!
  meal: String!
  mealPlan: MealPlan!
  numberOfServings: Int!
  nutritionLabel(advanced: Boolean): AggregateLabel
  recipe: MealPlanRecipe!
}

type MeasurementUnit {
  abbreviations: [String!]!
  id: String!
  name: String!
  symbol: String
  type: UnitType
}

type Mutation {
  addCategoryToRecipe(categoryName: String!, recipeId: String!): [Category!]!
  addCourseToRecipe(course: String!, recipeId: String!): Recipe!
  addCuisineToRecipe(cuisineId: [String!]!, recipeId: String!): Recipe!
  addPhotoToRecipe(photoId: [String!]!, recipeId: String!): Recipe!
  addPriceHistory(price: CreatePriceHistoryInput!): IngredientPriceHistory!
  addRecipeServing(serving: AddRecipeServingInput!): [MealPlanServing!]!
  addRecipeToMealPlan(recipe: AddRecipeInput!): [MealPlanRecipe!]!
  changeRecordStatus(id: String!, status: RecordStatus!): ImportRecord!
  connectExpirationRule(expirationRuleId: String!, ingredientId: String!): Ingredient!
  createCategory(name: String!): [Category!]!
  createCourse(name: String!): [Course!]!
  createCuisine(name: String!): [Cuisine!]!
  createExpirationRule(ingredientId: String!, rule: CreateExpirationRule!): ExpirationRule!
  createIngredient(ingredient: CreateIngredientInput!): Ingredient!
  createMealPlan(name: String!): MealPlan!
  createNutritionLabels(nutritionLabel: CreateNutritionLabelInput!, recipeId: String!): NutritionLabel!
  createProfile(profile: ProfileInput!): HealthProfile!
  createRecipe(recipe: RecipeInput!): Recipe!
  createUnit(input: CreateUnitInput!): MeasurementUnit!
  deleteCategory(categoryId: String!): [Category!]!
  deleteCourse(courseId: String!): [Course!]!
  deleteCuisine(cuisineId: String!): [Cuisine!]!
  deleteExpirationRule(expirationRuleId: String!): [ExpirationRule!]!
  deleteIngredient(ingredientToDeleteId: String!): [Ingredient!]!
  deleteMealPlan(id: String!): [MealPlan!]!
  deleteNutritionLabel(id: String!): [NutritionLabel!]!
  deletePriceHistory(ingredientId: String!, ingredientPriceId: String!): [IngredientPriceHistory!]!
  deleteRecipeServing(id: String!): [MealPlanServing!]!
  deleteRecipes(recipeIds: [String!]!): [Recipe!]!
  editExpirationRule(expirationRule: CreateExpirationRule!, expirationRuleId: String!): ExpirationRule!
  editIngredient(ingredient: CreateIngredientInput!, ingredientId: String!): Ingredient!
  editMealPlan(mealPlan: EditMealPlanInput!): MealPlan!
  editNutritionLabel(label: EditNutritionLabelInput!): NutritionLabel!
  editPriceHistory(price: EditPriceHistoryInput!, priceId: String!): IngredientPriceHistory!
  editProfile(id: String!, profile: ProfileInput!): HealthProfile!
  editRecipeServing(serving: EditRecipeServingInput!): [MealPlanServing!]!
  finalize(recordId: String!): ImportRecord!
  mergeIngredients(ingredientIdToDelete: String!, ingredientIdToKeep: String!): Ingredient!
  removeCategoryFromRecipe(categoryId: String!, recipeId: String!): [Category!]!
  removeCourseFromRecipe(courseId: String!, recipeId: String!): Recipe!
  removeCuisineFromRecipe(cuisineId: String!, recipeId: String!): Recipe!
  removeMealPlanRecipe(id: String!): [MealPlanRecipe!]!
  removePhotoFromRecipe(photoIds: [String!]!, recipeId: String!): Recipe!
  scheduleMealPlan(mealPlanId: String!, startDate: DateTime!): ScheduledPlan!
  updateMatches(groupId: String, labelId: String, recipeId: String, recordId: String!): ImportRecord!
  updateRecipe(recipe: RecipeInput!, recipeId: String!): Recipe!
  updateRecipeIngredients(ingredient: RecipeIngredientUpdateInput!): [RecipeIngredients!]!
  updateShoppingDays(days: [Int!]!, mealPlanId: String!): [Int!]!
  uploadImport(file: File!, type: PrismaImportType!): Import!
  uploadPhoto(isPrimary: Boolean!, photo: File!): Photo!
  uploadReceipt(file: File!): Receipt!
}

input NumericalComparison {
  eq: Int
  gte: Int
  lte: Int
}

type Nutrient {
  advancedView: Boolean!
  alternateNames: [String!]!
  customTarget: Float
  dri: [DailyReferenceIntake!]!
  name: String!
  subNutrients: [Nutrient!]!
  type: String!
  unit: MeasurementUnit!
}

type NutrientTarget {
  customTarget: Float
  dri: Float
}

enum NutrientType {
  ALCOHOL
  CARBOHYDRATE
  FAT
  GENERAL
  MINERAL
  OTHER
  PROTEIN
  VITAMIN
}

input NutritionFilter {
  nutrientID: String!
  perServing: Boolean
  target: NumericalComparison
}

type NutritionLabel {
  aggregateLabel(advanced: Boolean): AggregateLabel
  id: ID!
  ingredientGroup: RecipeIngredientGroup!
  isPrimary: Boolean!
  name: String
  recipe: Recipe
  servingSize: Float
  servingSizeUnit: MeasurementUnit
  servings: Float
  servingsUsed: Float
}

input OffsetPagination {
  offset: Int!
  take: Int!
}

type Photo {
  id: ID!
  isPrimary: Boolean!
  url: String!
}

enum PrismaImportType {
  CRONOMETER
  DRI
  MY_FITNESS_PAL
  RECIPE_KEEPER
  WEB
}

input ProfileInput {
  activityLevel: Float!
  birthYear: Int!
  bodyFatPercentage: Float!
  gender: Gender!
  height: Float!
  specialCondition: SpecialCondition!
  targetCarbsGrams: Float
  targetCarbsPercentage: Float
  targetFatGrams: Float
  targetFatPercentage: Float
  targetProteinGrams: Float
  targetProteinPecentage: Float
  weight: Float
}

type Query {
  categories(searchString: String): [Category!]!
  courses(searchString: String): [Course!]!
  cuisines(searchString: String): [Cuisine!]!
  dailyReferenceIntake: [Nutrient!]!
  expirationRule(expirationRuleId: String!): ExpirationRule!
  expirationRules(pagination: OffsetPagination!, search: String): ExpirationRulesQuery!
  groupedRecipeIngredients(recipeIds: [String!]!): [GroupedRecipeIngredient!]!
  healthProfile: HealthProfile!
  import(importId: String!): Import!
  importRecord(id: String!): ImportRecord!
  importRecords(importId: String!, pagination: OffsetPagination!): ImportRecordsQuery!
  imports(pagination: OffsetPagination!): ImportsQuery!
  ingredient(ingredientId: String!): Ingredient!
  ingredientPrice(ingredientPriceId: String!): IngredientPriceHistory!
  ingredients(pagination: OffsetPagination!, search: String): IngredientsQuery!
  mealPlan(id: String!): MealPlan!
  mealPlans: [MealPlan!]!
  nutritionLabel(labelId: String!): NutritionLabel!
  priceHistory(ingredientId: String!): [IngredientPriceHistory!]!
  receipt(id: String!): Receipt!
  recipe(recipeId: String!): Recipe!
  recipes(filter: RecipeFilter, pagination: OffsetPagination!): RecipesQuery!
  units(search: String): [MeasurementUnit!]!
}

type Receipt {
  date: DateTime
  id: String!
  imagePath: String!
  items: [ReceiptLine!]
  scanned: Boolean!
  total: Float
}

type ReceiptLine {
  description: String
  id: String!
  perUnitPrice: Float
  quantity: Float
  totalPrice: Float
  unitQuantity: String
}

type Recipe {
  aggregateLabel(advanced: Boolean): AggregateLabel
  category: [Category!]!
  cookTime: Int
  course: [Course!]!
  cuisine: [Cuisine!]!
  directions: String
  id: ID!
  ingredientFreshness: Int
  ingredients: [RecipeIngredients!]!
  isFavorite: Boolean!
  leftoverFreezerLife: Int
  leftoverFridgeLife: Int
  marinadeTime: Int
  name: String!
  notes: String
  nutritionLabels: [NutritionLabel!]
  photos: [Photo!]!
  prepTime: Int
  source: String
  totalTime: Int
  verifed: Boolean!
}

input RecipeFilter {
  categoryIds: [String!]
  cookTime: NumericalComparison
  courseIds: [String!]
  cuisineId: [String!]
  ingredientFilter: [IngredientFilter!]
  ingredientFreshDays: NumericalComparison
  isFavorite: Boolean
  leftoverFreezerLife: NumericalComparison
  leftoverFridgeLife: NumericalComparison
  marinadeTime: NumericalComparison
  numOfServings: NumericalComparison
  nutrientFilters: [NutritionFilter!]
  prepTime: NumericalComparison
  searchString: String
  totalPrepTime: NumericalComparison
}

type RecipeIngredientGroup {
  id: String!
  name: String!
  nutritionLabel: NutritionLabel
}

input RecipeIngredientInput {
  groupId: String
  groupName: String
  id: String
  ingredientId: String
  name: String
  order: Int
  quantity: Int
  sentence: String
  unitId: String
}

input RecipeIngredientUpdateInput {
  groupsToAdd: [String!]
  groupsToDelete: [String!]
  ingredientsToAdd: [RecipeIngredientInput!]
  ingredientsToDelete: [String!]
  ingredientsToUpdate: [RecipeIngredientInput!]
  recipeId: String!
}

type RecipeIngredients {
  baseIngredient: Ingredient
  group: RecipeIngredientGroup
  id: String!
  name: String
  order: Int!
  quantity: Float
  recipe: Recipe!
  sentence: String!
  unit: MeasurementUnit!
}

input RecipeInput {
  categoryIds: [String!]
  cookTime: Int
  courseIds: [String!]
  cuisineIds: [String!]
  directions: String
  ingredients: String
  isFavorite: Boolean
  leftoverFreezerLife: Int
  leftoverFridgeLife: Int
  marinadeTime: Int
  notes: String
  photoIds: [String!]
  prepTime: Int
  source: String
  title: String!
}

type RecipesQuery {
  itemsRemaining: Int!
  nextOffset: Int
  recipes: [Recipe!]!
}

enum RecordStatus {
  DUPLICATE
  IGNORED
  IMPORTED
  UPDATED
}

type ScheduledPlan {
  duration: Int!
  id: String!
  mealPlan: MealPlan!
  startDate: DateTime!
}

enum SpecialCondition {
  LACTATING
  NONE
  PREGNANT
}

enum UnitType {
  COUNT
  ENERGY
  VOLUME
  WEIGHT
}