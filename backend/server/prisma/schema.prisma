// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "../src/types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum ImportType {
  MY_FITNESS_PAL
  RECIPE_KEEPER
  CRONOMETER
}

enum IngredientCategory {
  DAIRY
  VEGETABLE
  FRUIT
  MEAT
  GRAIN
  SAUCE
  SPICE
  BAKING
}

enum NutrientType {
  CARBOHYDRATE
  FAT
  PROTEIN
  ALCHOHOL
  MINERAL
  VITAMIN
  OTHER
}

model MealPlan {
  id                   String     @id @default(cuid())
  name                 String
  mealPrepInstructions String
  servings             Servings[]
}

model Servings {
  mealPlan      MealPlan  @relation(fields: [mealPlanId], references: [id])
  mealPlanId    String
  recipe        Recipe    @relation(fields: [recipeId], references: [id])
  recipeId      String
  numOfServings Int
  day           DayOfWeek

  @@id([mealPlanId, recipeId])
}

model Import {
  id            String         @id @default(cuid())
  fileName          String
  type          ImportType
  status        ImportStatus
  path          String
  imageMapping  String?
  createdAt     DateTime       @default(now())
  importRecords ImportRecord[]
}

model ImportRecord {
  id             String          @id @default(cuid())
  import         Import          @relation(fields: [importId], references: [id])
  importId       String
  rawInput       String
  name           String
  status          RecordStatus
  recipe         Recipe? @relation(fields: [recipeId], references: [id])
  recipeId       String
  nutritionLabel NutritionLabel?
  createdAt     DateTime       @default(now())
}

enum ImportStatus {
  PENDING
  COMPLETED
}

enum RecordStatus {
  IMPORTED
  DUPLICATE
  PENDING
}

model RecipeIngredient {
  id                String     @id @default(cuid())
  isIngredient      Boolean    @default(true)
  sentence          String
  minQuantity       Float?
  maxQuantity       Float?
  quantity          Float?
  unit              String?
  name              String?
  comment           String?
  other             String?
  recipe            Recipe     @relation(fields: [recipeId], references: [id])
  recipeId          String // relation scalar field (used in the `@relation` attribute above)
  ingredient        Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId      String? // relation scalar field (used in the `@relation` attribute above)
  display           Boolean?
  group             RecipeIngredientGroup? @relation(fields: [groupId], references: [id])
  groupId           String
}

model RecipeIngredientGroup {
  id String @id @default(cuid())
  name String
  ingredients RecipeIngredient[]
  nutritionLabel NutritionLabel?
}

model Ingredient {
  id                  String                    @id @default(cuid())
  recipeIngredient    RecipeIngredient[]
  name                String                    @unique
  alternateNames      IngredientAlternateName[]
  storageInstructions String?
  priceHistory        IngredientPrice[]
  expirationRule      ExpirationRule?           @relation(fields: [expirationRuleId], references: [id])
  expirationRuleId    String?
}

model ExpirationRule {
  id          String       @id @default(cuid())
  defrostTime Int?
  perishable  Boolean?
  tableLife   Int?
  fridgeLife  Int?
  freezerLife Int?
  ingredients Ingredient[]
}

model IngredientAlternateName {
  id           String     @id @default(cuid())
  name         String     @unique
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
}

model IngredientPrice {
  id           String     @id @default(cuid())
  date         DateTime
  retailer     String
  price        Float
  quantity     Float
  unit         String
  pricePerUnit Float
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
}

model Recipe {
  id                  String             @id @default(cuid())
  recipeKeeperId      String?
  title               String
  source              String?
  preparationTime     Int?
  cookingTime         Int?
  marinadeTime        Int?
  directions          String?
  notes               String?
  stars               Int?
  photos              RecipePhotos[]
  isFavorite          Boolean            @default(false)
  childRecipes        Recipe[]           @relation("LinkedRecipes")
  parentRecipes       Recipe[]           @relation("LinkedRecipes")
  course              Course?            @relation(fields: [courseId], references: [id])
  courseId            String?
  category            Category[]
  cuisine             Cuisine?           @relation(fields: [cuisineId], references: [id])
  cuisineId           String?
  ingredients         RecipeIngredient[]
  ingredientsTxt      String?
  mealPlans           Servings[]
  importId            String?
  leftoverFridgeLife  Int?
  leftoverFreezerLife Int?
  isVerified          Boolean            @default(false)
  nutritionLabel      NutritionLabel[]
  importRecords       ImportRecord[] 
}

// BREAKFAST, LUNCH, DINNER, SNACK
model Course {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[]
}

// Main Dish, Side Dish, Dessert, Appetizer, Salad, Soup, Bread, Beverage, Sauce or Condiment, Seasoning or Spice, Marinade, Fingerfood, Snack, Drink
model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[]
}

model Cuisine {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[]
}

model Photo {
  id         String  @id @default(cuid())
  path       String
  hash       String @unique
  recipes    RecipePhotos[]
}

model RecipePhotos {
  photo Photo @relation(fields: [photoId], references: [id])
  photoId String
  recipe Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
  isPrimary Boolean @default(false)
  @@id([photoId, recipeId])

}

model NutritionLabel {
  id             String                   @id @default(cuid())
  recipe         Recipe?                  @relation(fields: [recipeId], references: [id])
  recipeId       String?                  
  ingredientGroup RecipeIngredientGroup? @relation(fields: [ingredientGroupId], references: [id])
  ingredientGroupId String @unique
  nutrients      NutritionLabelNutrient[]
  name           String
  percentage     Float?
  servings       Float?
  servingSize    Float?
  source         NutritionSource
  importRecord   ImportRecord?            @relation(fields: [importRecordId], references: [id])
  importRecordId String?                  @unique
}

enum NutritionSource {
  CRONOMETER
  RECIPE_KEEPER
  CUSTOM
}

model NutritionLabelNutrient {
  nutritionLabel   NutritionLabel @relation(fields: [nutritionLabelId], references: [id])
  nutritionLabelId String
  nutrient         Nutrient       @relation(fields: [nutrientId], references: [id])
  nutrientId       String
  value            Float
  @@id([nutritionLabelId, nutrientId])
}

model Nutrient {
  id                      String                   @id @default(cuid())
  name                    String                  @unique
  unit                    String
  unitAbbreviation        String
  alternateNames          String[]
  type                    NutrientType
  customTarget            Boolean
  customValue             Float?
  dri                     DailyReferenceIntake[]
  parentNutrientId        String?
  parentNutrient          Nutrient?                @relation("SubNutrients", fields: [parentNutrientId], references: [id])
  subNutrients            Nutrient[]               @relation("SubNutrients")
  NutritionLabelNutrients NutritionLabelNutrient[]
}

model DailyReferenceIntake {
  id               String           @id @default(cuid())
  value            Float
  gender           Gender
  ageMin           Int
  ageMax           Int
  specialCondition SpecialCondition
  nutrient         Nutrient         @relation(fields: [nutrientId], references: [id])
  nutrientId       String
}

enum Gender {
  MALE
  FEMALE
}

enum SpecialCondition {
  PREGNANT
  LACTATING
  NONE
}

model HealthProfile {
  id                String @id @default(cuid())
  weight            Float
  gender            Gender
  bodyFatPercentage Float
  height            Float
  yearBorn          Int
  activityLevel     Float
  targetProtein     Float
  targetCarbs       Float
  targetFat         Float
}
